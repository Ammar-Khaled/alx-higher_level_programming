The ``0-add_integer`` test cases
********************************

Using add_integer
------------------

Importing the add_integer function from module:
    >>> add_integer = __import__("0-add_integer").add_integer

Adding two normal integers:
    >>> add_integer(1, 2)
    3

Subtracting 100 and 5:
    >>> add_integer(100, -5)
    95

Adding float and integer:
    >>> add_integer(2.1, 3)
    5

Adding any number with 98:
    >>> add_integer(2.1)
    100

Adding an integer number and a string:
    >>> add_integer(4, "School")
    Traceback (most recent call last):
	      ...
    TypeError: b must be an integer

Passing None
    >>> add_integer(None)
    Traceback (most recent call last):
	      ...
    TypeError: a must be an integer

Adding a letter and a number:
    >>> add_integer('1', 1)
    Traceback (most recent call last):
              ...
    TypeError: a must be an integer

Adding two letters
    >>> add_integer('2', '1')
    Traceback (most recent call last):
              ...
    TypeError: a must be an integer

Adding a tuple
    >>> add_integer((1, 1))
    Traceback (most recent call last):
              ...
    TypeError: a must be an integer

Adding a number and a list
    >>> add_integer(123, [])
    Traceback (most recent call last):
	      ...
    TypeError: b must be an integer

Adding two float numbers
    >>> add_integer(2.9, 2.9)
    4

Case Overflow:

    >>> add_integer(float('inf'), 0)
    Traceback (most recent call last):
    	      ...
    OverflowError: cannot convert float infinity to integer

Case NaN:

    >>> add_integer(0, float('nan'))
    Traceback (most recent call last):
    	      ...
    ValueError: cannot convert float NaN to integer
